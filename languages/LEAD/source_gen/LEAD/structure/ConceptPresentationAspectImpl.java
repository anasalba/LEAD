package LEAD.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AttributeDefinition;
  private ConceptPresentation props_AttributeList;
  private ConceptPresentation props_Check;
  private ConceptPresentation props_Enrich;
  private ConceptPresentation props_From;
  private ConceptPresentation props_Match;
  private ConceptPresentation props_NamedStreamReference;
  private ConceptPresentation props_Query;
  private ConceptPresentation props_StreamDefinition;
  private ConceptPresentation props_StreamList;
  private ConceptPresentation props_StreamReference;
  private ConceptPresentation props_name;
  private ConceptPresentation props_test1;
  private ConceptPresentation props_test2;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AttributeDefinition:
        if (props_AttributeDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AttributeDefinition = cpb.create();
        }
        return props_AttributeDefinition;
      case LanguageConceptSwitch.AttributeList:
        if (props_AttributeList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AttributeList");
          props_AttributeList = cpb.create();
        }
        return props_AttributeList;
      case LanguageConceptSwitch.Check:
        if (props_Check == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Check");
          props_Check = cpb.create();
        }
        return props_Check;
      case LanguageConceptSwitch.Enrich:
        if (props_Enrich == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Enrich");
          props_Enrich = cpb.create();
        }
        return props_Enrich;
      case LanguageConceptSwitch.From:
        if (props_From == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("From");
          props_From = cpb.create();
        }
        return props_From;
      case LanguageConceptSwitch.Match:
        if (props_Match == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Match");
          props_Match = cpb.create();
        }
        return props_Match;
      case LanguageConceptSwitch.NamedStreamReference:
        if (props_NamedStreamReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NamedStreamReference = cpb.create();
        }
        return props_NamedStreamReference;
      case LanguageConceptSwitch.Query:
        if (props_Query == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Query");
          props_Query = cpb.create();
        }
        return props_Query;
      case LanguageConceptSwitch.StreamDefinition:
        if (props_StreamDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StreamDefinition = cpb.create();
        }
        return props_StreamDefinition;
      case LanguageConceptSwitch.StreamList:
        if (props_StreamList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StreamList");
          props_StreamList = cpb.create();
        }
        return props_StreamList;
      case LanguageConceptSwitch.StreamReference:
        if (props_StreamReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xebf7f592fe9245eeL, 0xaac5a2d99c69cfa1L, 0x45a737ba1a53cafdL, 0x45a737ba1a53cafeL, "stream", "", "");
          props_StreamReference = cpb.create();
        }
        return props_StreamReference;
      case LanguageConceptSwitch.name:
        if (props_name == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_name = cpb.create();
        }
        return props_name;
      case LanguageConceptSwitch.test1:
        if (props_test1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("test1");
          props_test1 = cpb.create();
        }
        return props_test1;
      case LanguageConceptSwitch.test2:
        if (props_test2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_test2 = cpb.create();
        }
        return props_test2;
    }
    return null;
  }
}
